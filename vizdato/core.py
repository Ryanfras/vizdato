# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['print_something', 'make_changes_in_colab', 'explore_df']

# Cell
def print_something():
    print('This is for fun')

# Cell
def make_changes_in_colab():
  print('This was done in colab')

# Cell
def explore_df(df):

    """
    A more advanced version of describe for tabular exploratory data analysis. Inlcudes additional information such as,
    missing observations, unique observations, constant feature flagging, all_missing feature flagging, feature types & outlier
    values.

    Parameters
    ----------
    df : pandas df, required
        Pandas dataframe object

    Returns
    -------
    pandas df
        Returns a pandas dataframe object

    Usage
    -----
        df = pd.DataFrame({"x1": ["a", "b", "c", "a"], "x2":['x','y','x','x'], "y": [1,1,0,1]})
        eda = explore_df(df=df)
    """

    import pandas as pd
    import numpy as np

    ft = pd.DataFrame()
    ft['type']=df.dtypes.astype(str)
    ft['feature']=ft.index
    ft['unique']=df.nunique()
    ft['missing']= df.isnull().sum()
    ft['constant']=np.where(ft['unique']==1,1,0)
    ft['all_missing']=np.where(ft['missing']==df.shape[0],1,0)

    numeric = ft.loc[(ft['type'].str.contains('float'))]['feature']
    numeric = numeric.append(ft.loc[(ft['type'].str.contains('int'))]['feature'])

    categorical = ft.loc[(ft['type'].str.contains('object'))]['feature']

    # Summary statistics
    lower=df[numeric].quantile(q=0.25)
    upper=df[numeric].quantile(q=0.75)
    ft['min']=df[numeric].min()
    ft['q1']=lower
    ft['median']=df[numeric].median()
    ft['mean']=df[numeric].mean()
    ft['q3']=upper
    ft['max']=df[numeric].max()

    # Caclulate outlier values
    iqr = upper - lower
    lower=lower-(1.5*iqr)
    upper=upper+(1.5*iqr)
    ft['lower_outlier']=lower
    ft['upper_outlier']=upper
    ft['skewness']=df[numeric].skew()

    ft['class'] = np.where(ft['type'].str.contains('float'), 'numeric', None)
    ft['class'] = np.where(ft['type'].str.contains('int'), 'numeric', ft['class'])
    ft['class'] = np.where(ft['type'].str.contains('object'), 'categorical', ft['class'])
    ft['class'] = np.where(ft['type'].str.contains('datetime'), 'datetime', ft['class'])
    ft['class'] = np.where(ft['class'].isin(['numeric','integer']) &
                           (ft['min'] == 0) &
                           (ft['max'] == 1) &
                           (ft['unique'] == 2), 'indicator', ft['class'])

    ft=ft[['feature','type','class','missing','unique','constant','all_missing','min','q1','median',
         'mean','q3','max','lower_outlier','upper_outlier','skewness']]

    ft=ft.reset_index(drop=True)
    return ft